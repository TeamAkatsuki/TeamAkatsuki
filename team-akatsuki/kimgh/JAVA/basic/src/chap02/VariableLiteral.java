package chap02;

public class VariableLiteral {
	public static void main(String[] args) {
		
		//주석 (ctrl+/)
		
		/*
		 주석2 (ctrl+shift+/)
		 */
		
		/* 정수 리터럴
		 * 
		 * 0, 75, -100 10진수로 인식.
		 * 
		 * 02, -04 8진수로 인식.
		 * 
		 * 0xA, 0x5 16진수로 인식
		 * 
		 * 종류		byte   char   short   int    long   5개 타입
		 * 비트		8bit   16bit  16bit   32bit  64bit
		 * 바이트 	1byte  2byte  2byte   4byte  8byte
		 * 최소값   -2^7   0      -2^15   -2^31  -2^63
		 * 최대값   2^7-1  2^16-1 2^15-1  2^31-1 2^63-1
		 * 				   (아스키
		 * 		     	   유니코드)
		 * 
		 * 
		 * (뒤로 갈 수록 메모리 사용 크기, 저장되는 값의 범위 증가)
		 * 
		 * 
		 * byte가 메모리가 가장 적어서 절약 가능. 
		 * char는 사실 문자형, 정수를 넣어줄 수 있음.
		 * 
		 */
		
		/* 실수 리터럴 
		 * 소수점이 있는 리터럴들
		 * 
		 * 5E7 -> 5 x 10^7
		 * 0.12E-5 -> 0.12 x 10^-5
		 * 
		 * 종류		float    	  double
		 * 비트		32bit    	  64bit
		 * 바이트	4byte    	  8byte
		 * 범위     (+/-)1.4E-45  (+/-)4.9E-324
		 *          (+/-)3.4E38   (+/-)1.7E308
		 * */
		
		/* 문자 리터럴 
		 * 작은 따옴표(')로 묶인 텍스트는 하나의 문자 리터럴로 인식.
		 * 'A' '한' '\t' '\n'
		 * 
		 * 문자 리터럴을 저장할 수 있는 타입은 char 하나뿐
		 * */
		
		/* 논리 리터럴 
		 * 
		 * true / false
		 * 
		 * 논리 리터럴을 저장할 수 있는 타입은 boolean 하나 뿐.
		 * 
		 * boolean 1byte 8bit true, false 저장
		 * 
		 * */
		
		/* 문자열 리터럴 
		 *
		 * 큰 따옴표(")로 묶인 텍스트는 문자열 리터럴로 인식.
		 * 큰 따옴표 안에 텍스트가 없어도 문자열 리터럴로 인식.
		 * zb. ("")
		 * 
		 * 문자열 리터럴 내부에서 이스케이프 문자를 사용할 수 있음. \t, \n 등
		 * 
		 * "뽀롱뽀롱" "뽀\t로\t로"
		 * 
		 * 문자열 리터럴을 저장할 수 있는 타입은 String 하나 뿐.
		 * 
		 *  */
		
		
		
		
	}
}
