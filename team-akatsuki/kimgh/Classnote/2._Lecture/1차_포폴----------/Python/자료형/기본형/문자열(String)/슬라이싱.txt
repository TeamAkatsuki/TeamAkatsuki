Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2020-07-23T10:14:43+09:00

====== 슬라이싱 ======
Created 목요일 23 7월 2020

===== 슬라이싱 =====

**토막내기**

(인덱스가 있는 자료형)[시작번호:끝번호]

로 사용한다.

ex a[1:2] b[23:46]

**__시작번호 <= 인덱스 < 끝번호__**

라는 것을 염두해야 한다.

ex) **1:4 -> 인덱스 1, 2, 3번 -> 2번째부터 4번째 문자**

{{.\pasted_image003.png}}(l , l, 빈칸, I)

**앞 번호 생략 : 처음부터**
**뒷 번호 생략 : 마지막까지**
**둘 다 생략 : 문자열 전체**


==== 슬라이싱으로 문자열 나누기 ====

{{.\pasted_image004.png}}(예제 1)

{{.\pasted_image005.png}}{{.\pasted_image006.png}}(예제 2)



==== 슬라이싱 심화(카운트) ====


a = "20010131Rainy" -> 20010131 //// Rainy -> a[:8] a[8:]
b = "179Rai354ny" -> 179 //// Rai354ny -> b[:3] b[3:]
c = "21R354yn76" -> 21 //// R354yn76 -> c[:2] c[2:]

**__변동하는 R의 위치에 따라 슬라이싱 하려면 어떻게 해야 할까?__**

문제를 풀 때 바꿀 수 없는 것은 상수, 상수를 먼저 인식해야 한다.

{{.\pasted_image007.png}}(buildup, 변수에 자료를 쉽게 담자 2 vs 3)


{{.\pasted_image008.png}}(조건문)



{{.\pasted_image009.png}}(리스트와 조건문)

{{.\pasted_image010.png}}{{.\pasted_image011.png}} (리스트와 for in 문)


{{.\pasted_image013.png}}(리스트와 for in 문을 합쳐 쓰기, 코드블럭)


{{.\pasted_image014.png}}(리스트와 for in 문 여러 개 합쳐 쓰기, 코드블럭.)

**__코드 블럭 안에 있는 내용은 들여써서 구분, 이것만 지키면 문법이 맞는 한 컴퓨터는 작동__**

{{.\pasted_image015.png}}(작동하는 모습, 한 번 들여 쓴 x, if, y는 for의 코드 블럭 안에 있는 것, if는 다시 for를 끌어 안고, 그 for 는 또 print를 끌어 안는 모습, 기능은 하지 않아도 문법은 맞은 상태)


그러나 깔끔한, 좋은 코드는 간결하고 가독성이 좋아야 함.


--------------------

{{.\pasted_image016.png}}

for와 문자열을 이용한 count 정의



{{.\pasted_image017.png}}


if , for , 문자열을 이용하여 "R"이 처음으로 나오는 때의 번호를 매김.

--------------------

{{.\pasted_image018.png}}

{{.\pasted_image019.png}}
R이 등장하는 위치를 나타내는 코드

{{.\pasted_image020.png}}

최종 코드
{{.\pasted_image021.png}}
결과물
